@using LibreriaAlvarez.WebApp.Services
@page "/fetch-prices"
@inject LibreriaPriceService LibreriaPriceservice

<h1>Lista de Precios</h1>

@if (loading)
{
    <p><em>Cargando...</em></p>
}
else
{
    <p>Buscar entre <b>@total</b> articulos de librería y juguetes.</p>
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="buscar-addon">Buscar por Nombre</span>
                    </div>
                    <input type="text" placeholder="Articulos" value=@searchCriteria oninput=@OnChangeSearchCriteria class="form-control" aria-describedby="buscar-addon" aria-label="Buscar Articulo" />
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="buscar-codigo">Buscar por Lista</span>
                    </div>
                    <select name="fechas" class="custom-select" bind="@searchCriteriaList" required>
                        <option value="" selected>-- Lista --</option>
                        @foreach (var lista in listaSelect)
                        {
                            <option value=@lista>@lista</option>
                        }
                    </select>
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="seleccionar-fecha">Fecha</span>
                    </div>
                    <select name="fechas" class="custom-select" value="@fechaSeleccionada" onchange="@onDateChanged" required>
                        @foreach (var fecha in listaFechas)
                        {
                            <option value=@fecha.Fecha>@fecha.Fecha.ToString("yyyy-MM-dd")</option>
                        }
                    </select>
                </div>
            </div>
            </div>
    </div>
    <br />
        <TablaPrecios ListaPrecios="@topPrecios" />
        <button class="btn btn-primary" onclick=@(async () => await LibreriaPriceservice.DownLoadExcel(precios))>Descargar lista de precios completa</button>
}

@functions {
    IEnumerable<LibreriaPrice> precios;
    IEnumerable<LibreriaPrice> topPrecios;
    IEnumerable<ListaFechas> listaFechas;
    IEnumerable<LoadedList> listasCargadas;
    IEnumerable<string> listaSelect;

    string searchCriteria;
    string searchCriteriaList;

    int total;
    bool loading = true;
    DateTime fechaSeleccionada;

    async Task OnChangeSearchCriteria(UIChangeEventArgs arg)
    {
        await Task.Run(() => searchCriteria = arg.Value.ToString().ToUpper());
    }

    async Task OnChangeListSearch(UIChangeEventArgs arg)
    {
        await Task.Run(() => searchCriteriaList = arg.Value.ToString().ToUpper());
    }

    async Task onDateChanged(UIChangeEventArgs args)
    {

        await SetPriceListByDate(Convert.ToDateTime(args.Value));

    }

    async Task onSelectedList(UIChangeEventArgs args)
    {

    }

    protected async Task SetPriceListByDate(DateTime date)
    {
        loading = true;
        fechaSeleccionada = date;

        listasCargadas = await LibreriaPriceservice.GetLoadedList();
        searchCriteriaList = "";

        listaSelect = (from l in listasCargadas
                       where l.Fecha == fechaSeleccionada
                       select l.Lista);

        precios = await LibreriaPriceservice.GetPricesByDate(fechaSeleccionada).ConfigureAwait(false);
        topPrecios = await Task.Run(() => (from p in precios
                                           where p.Desc.Contains(searchCriteria) && (String.IsNullOrEmpty(searchCriteriaList.Trim()) || p.Lista.Equals(searchCriteriaList))
                                           select p).Take(20)).ConfigureAwait(false);

        total = precios.Count();
        loading = false;
    }

    protected override async Task OnInitAsync()
    {
        searchCriteria = "";
        searchCriteriaList = "";
        total = 0;
 
        var date = await LibreriaPriceservice.GetLastDateAsync().ConfigureAwait(false);
        await SetPriceListByDate(date).ConfigureAwait(false);

        listaFechas = await LibreriaPriceservice.GetLoadedDates().ConfigureAwait(false);
    }

}
